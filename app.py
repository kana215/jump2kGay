
import os, re, time, tempfile, hashlib
from datetime import datetime, timezone
from pathlib import Path
from typing import List, Dict, Any, Optional

import streamlit as st
import requests
import streamlit.components.v1 as components

# ffmpeg
try:
    import imageio_ffmpeg
    ffmpeg_path = imageio_ffmpeg.get_ffmpeg_exe()
    os.environ["PATH"] = str(Path(ffmpeg_path).parent) + os.pathsep + os.environ.get("PATH", "")
except Exception:
    pass

from faster_whisper import WhisperModel
import dateparser

st.set_page_config(page_title="Whisper Small ‚Üí Tasks ‚Üí Jira", page_icon="üåÄ", layout="wide")
st.markdown("<h1 style='margin-bottom:0'>üåÄ Whisper Small ‚Üí Tasks ‚Üí Jira</h1>", unsafe_allow_html=True)
st.caption("CPU-only ¬∑ faster-whisper small ¬∑ Start button ¬∑ Live progress ¬∑ Stable checkboxes ¬∑ Jira ADF ¬∑ Enter‚ÜíNext")

MODEL_NAME = "small"
COMPUTE_TYPE = "int8"
DEVICE = "cpu"

@st.cache_resource(show_spinner=True)
def load_model_cached() -> WhisperModel:
    return WhisperModel(MODEL_NAME, device=DEVICE, compute_type=COMPUTE_TYPE)

model = load_model_cached()

with st.sidebar:
    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    lang_hint = st.selectbox("–Ø–∑—ã–∫ –∞—É–¥–∏–æ (–ø–æ–¥—Å–∫–∞–∑–∫–∞)", ["auto", "ru", "kk", "en", "tr"], index=0)

def detect_lang_code(text: str) -> str:
    cyr = sum('–∞' <= ch.lower() <= '—è' or ch == '—ë' for ch in text)
    lat = sum('a' <= ch.lower() <= 'z' for ch in text)
    return "ru" if cyr > lat else "en"

def split_sentences(text: str) -> List[str]:
    sents = re.split(r"(?<=[.!?])\s+|[\n\r]+|‚Ä¢\s*| - ", text.strip())
    return [s.strip(" \t-‚Äî‚Ä¢") for s in sents if len(s.strip()) > 2]

def expand_compounds(s: str) -> List[str]:
    parts = re.split(r"\b(–∏|–∞ —Ç–∞–∫–∂–µ|–∑–∞—Ç–µ–º|–ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ|–ø–æ—Ç–æ–º|–¥–∞–ª–µ–µ|and then|and)\b", s, flags=re.IGNORECASE)
    out = []
    for p in parts:
        if re.fullmatch(r"(–∏|–∞ —Ç–∞–∫–∂–µ|–∑–∞—Ç–µ–º|–ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ|–ø–æ—Ç–æ–º|–¥–∞–ª–µ–µ|and then|and)", p, flags=re.IGNORECASE):
            continue
        frag = p.strip(" ,.;:‚Äî-")
        if frag:
            out.append(frag)
    return out or [s]

VERB_RE = r"(–ø—Ä–æ–≤–µ—Å—Ç–∏|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|—Å–æ–∑–¥–∞—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|—Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è|–¥–æ–±–∞–≤–∏—Ç—å|–∏—Å–ø—Ä–∞–≤–∏—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|—Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å|–æ–±–Ω–æ–≤–∏—Ç—å|–æ–ø–∏—Å–∞—Ç—å|—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–¥–∫–ª—é—á–∏—Ç—å|–æ—Ñ–æ—Ä–º–∏—Ç—å|–Ω–∞–∑–Ω–∞—á–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–ø—Ä–µ–∑–µ–Ω—Ç–æ–≤–∞—Ç—å|–æ–∂–∏–¥–∞—Ç—å|—Å–æ–±—Ä–∞—Ç—å|–¥–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å|—É—Ç–≤–µ—Ä–¥–∏—Ç—å|–ø–æ–¥–µ–ª–∏—Ç—å—Å—è|—Å–∫–∏–Ω—É—Ç—å|–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å|–Ω–∞–ø–æ–º–Ω–∏—Ç—å|–ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏|review|plan|schedule|deploy|implement|prepare|send|create|write|check|fix|update|investigate|present|follow up)"

def candidate_actions(text: str) -> List[str]:
    out = []
    for s in split_sentences(text):
        if not re.search(VERB_RE, s, flags=re.IGNORECASE):
            continue
        for sub in expand_compounds(s):
            sub = re.sub(r"(?i)\b(–Ω—É–∂–Ω–æ|–Ω–∞–¥–æ|–±—É–¥–µ—Ç|–¥–∞–≤–∞–π—Ç–µ|–¥–∞–≤–∞–π|–ø—Ä–µ–¥–ª–∞–≥–∞—é)\s+", "", sub).strip()
            m = re.search(VERB_RE + r".*", sub, flags=re.IGNORECASE)
            frag = sub[m.start():].strip() if m else sub
            frag = re.split(r"[.;!?]", frag)[0].strip(" ,.;:‚Äî-")
            words = frag.split()
            if len(words) > 16:
                frag = " ".join(words[:16])
            if len(frag) >= 3:
                out.append(frag)
    seen, res = set(), []
    for t in out:
        if t not in seen:
            res.append(t); seen.add(t)
    return res

def extract_tasks(text: str) -> List[Dict[str, Any]]:
    tasks = []
    for frag in candidate_actions(text):
        email = None
        m_email = re.search(r'[\w\.-]+@[\w\.-]+\.\w+', frag)
        if m_email: email = m_email.group(0)
        tasks.append({
            "id": hashlib.md5(frag.encode("utf-8")).hexdigest()[:10],
            "summary": frag[:120],
            "description": frag,
            "assignee_email": email,
            "due_text": None,
        })
    if not tasks and text:
        tasks.append({
            "id": hashlib.md5(text[:64].encode("utf-8")).hexdigest()[:10],
            "summary": "Review transcript & create tasks",
            "description": text[:2000],
            "assignee_email": None,
            "due_text": None,
        })
    return tasks

def to_adf(text: str) -> Dict[str, Any]:
    return {
        "type": "doc",
        "version": 1,
        "content": [{"type": "paragraph", "content": [{"type": "text", "text": text or ""}]}],
    }

def parse_due(due_text: Optional[str], ref_dt):
    if not due_text: return None
    dt = dateparser.parse(due_text, languages=["ru","en","kk","tr"], settings={"RELATIVE_BASE": ref_dt})
    return dt.date().isoformat() if dt else None

def create_jira_issue(base_url: str, email: str, api_token: str, project_key: str, task: Dict[str, Any], due_iso: Optional[str]) -> Dict[str, Any]:
    url = base_url.rstrip("/") + "/rest/api/3/issue"
    auth = (email, api_token)
    payload = {
        "fields": {
            "project": {"key": project_key},
            "summary": task["summary"][:120] if task["summary"] else "Task",
            "description": to_adf(task.get("description") or task["summary"]),
            "issuetype": {"name": "Task"},
        }
    }
    if due_iso:
        payload["fields"]["duedate"] = due_iso
    headers = {"Accept":"application/json","Content-Type":"application/json"}
    r = requests.post(url, auth=auth, json=payload, headers=headers, timeout=60)
    if r.status_code >= 300:
        return {"ok": False, "error": r.text}
    res = r.json()
    return {"ok": True, "key": res.get("key"), "id": res.get("id")}

# ------------------ UI ------------------
col1, col2 = st.columns([2,1])

with col1:
    st.subheader("1) –ó–∞–≥—Ä—É–∑–∫–∞ ‚Üí –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ")
    file = st.file_uploader("–§–æ—Ä–º–∞—Ç—ã: wav, mp3, m4a, ogg, flac, mp4, mov, mkv, webm",
                            type=["wav","mp3","m4a","ogg","flac","mp4","mov","mkv","webm"])
    if file is not None:
        with tempfile.NamedTemporaryFile(delete=False, suffix=f"_{file.name}") as tmp:
            tmp.write(file.read()); src_path = tmp.name
        st.audio(src_path)
        if st.button("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ", type="primary"):
            prog = st.progress(0)
            elapsed_box = st.empty()
            live_text_box = st.empty()
            start_t = time.time()
            transcript_parts: List[str] = []

            kwargs = {}
            if lang_hint and lang_hint != "auto":
                kwargs["language"] = lang_hint
            segments, info = model.transcribe(
                src_path,
                vad_filter=True,
                vad_parameters={"min_silence_duration_ms": 500},
                **kwargs
            )
            duration = max(1.0, float(getattr(info, "duration", 1.0)))
            last_p = 0
            try:
                for seg in segments:
                    transcript_parts.append(seg.text)
                    p = min(100, int(100.0 * float(getattr(seg, "end", 0.0)) / duration))
                    if p > last_p: prog.progress(p); last_p = p
                    elapsed_box.markdown(f"‚è±Ô∏è –í—Ä–µ–º—è: **{time.time()-start_t:.1f} —Å–µ–∫** ¬∑ –ü—Ä–æ–≥—Ä–µ—Å—Å: **{p}%**")
                    live_text_box.markdown(f"**–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (on-the-fly):**\n\n{''.join(transcript_parts)}")
            finally:
                try: os.unlink(src_path)
                except Exception: pass

            final_text = "".join(transcript_parts).strip()
            st.success(f"–ì–æ—Ç–æ–≤–æ ¬∑ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f} —Å–µ–∫ ¬∑ –í—Å–µ–≥–æ: {time.time()-start_t:.1f} —Å–µ–∫ ¬∑ –Ø–∑—ã–∫ (–ø–æ —Ç–µ–∫—Å—Ç—É): {detect_lang_code(final_text)}")
            st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç (.txt)", data=final_text, file_name="transcript.txt", mime="text/plain")
            st.session_state["final_transcript"] = final_text
            st.session_state["ref_datetime"] = datetime.now(timezone.utc).isoformat()

# After transcription
final_text = st.session_state.get("final_transcript", "")
if final_text:
    st.subheader("üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π)")
    edited_text = st.text_area("–¢–µ–∫—Å—Ç", value=final_text, height=220, key="final_text_area")

    text_hash = hashlib.md5(edited_text.encode("utf-8")).hexdigest()
    if st.session_state.get("tasks_src_hash") != text_hash:
        tasks = extract_tasks(edited_text)
        st.session_state["tasks"] = tasks
        st.session_state["tasks_src_hash"] = text_hash
        # initialize checkbox states (all True)
        for t in tasks:
            st.session_state.setdefault(f"inc_{t['id']}", True)

    st.markdown("### ‚úÖ –ó–∞–¥–∞—á–∏ (–≥–∞–ª–æ—á–∫–∏ —Å—Ç–æ—è—Ç –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ ‚Äî —Å–Ω–∏–º–∞–π –ª–∏—à–Ω–∏–µ)")
    c1, c2 = st.columns(2)
    if c1.button("–í—ã–±—Ä–∞—Ç—å –≤—Å—ë"):
        for t in st.session_state.get("tasks", []):
            st.session_state[f"inc_{t['id']}"] = True
    if c2.button("–°–Ω—è—Ç—å –≤—Å—ë"):
        for t in st.session_state.get("tasks", []):
            st.session_state[f"inc_{t['id']}"] = False

    for t in st.session_state.get("tasks", []):
        cols = st.columns([0.08, 0.92])
        with cols[0]:
            st.checkbox("", key=f"inc_{t['id']}")
        with cols[1]:
            st.write(f"**{t['summary']}**")
            if t.get("description") and t["description"] != t["summary"]:
                st.caption(t["description"])

with col2:
    st.subheader("2) –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á –≤ Jira")
    with st.form("jira_form", clear_on_submit=False):
        jira_url = st.text_input("Jira URL", placeholder="https://your-domain.atlassian.net")
        jira_email = st.text_input("Jira email")
        jira_token = st.text_input("Jira API token", type="password")
        jira_project = st.text_input("Project Key", placeholder="PRJ")
        submitted = st.form_submit_button("üöÄ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤ Jira", type="primary")

        # Inject JS: Enter ‚Üí focus next input; on last input ‚Üí submit the form
        components.html("""
<script>
(function(){
  const stFrame = window.frameElement; // our iframe
  if(!stFrame) return;
  const root = stFrame.closest('div[data-testid="stForm"]') || stFrame.parentElement;
  // fallback: whole document
  const doc = window.parent.document;
  const form = doc.querySelector('form[data-testid="stForm"]');
  if(!form) return;
  const inputs = form.querySelectorAll('input[type="text"], input[type="password"]');
  const submitBtn = form.querySelector('button[kind="primary"]');
  inputs.forEach((inp, idx)=>{
    inp.addEventListener('keydown', (e)=>{
      if(e.key === 'Enter'){
        e.preventDefault();
        if(idx < inputs.length-1){
          inputs[idx+1].focus();
        }else{
          submitBtn && submitBtn.click();
        }
      }
    });
  });
})();
</script>
        """, height=0)
    if submitted:
        missing = []
        if not jira_url.strip(): missing.append("URL")
        if not jira_email.strip(): missing.append("email")
        if not jira_token.strip(): missing.append("API token")
        if not jira_project.strip(): missing.append("Project Key")
        if missing:
            st.warning("–ó–∞–ø–æ–ª–Ω–∏ –ø–æ–ª—è: " + ", ".join(missing))
        else:
            chosen = [t for t in st.session_state.get("tasks", []) if st.session_state.get(f"inc_{t['id']}", True)]
            if not chosen:
                st.error("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
            else:
                ref_iso = st.session_state.get("ref_datetime", datetime.now(timezone.utc).isoformat())
                ref_dt = datetime.fromisoformat(ref_iso)
                results = []
                with st.spinner("–°–æ–∑–¥–∞—é –∑–∞–¥–∞—á–∏..."):
                    for t in chosen:
                        due_iso = parse_due(t.get("due_text"), ref_dt) if t.get("due_text") else None
                        res = create_jira_issue(jira_url, jira_email, jira_token, jira_project, t, due_iso)
                        results.append(res)
                ok = [r for r in results if r.get("ok")]
                bad = [r for r in results if not r.get("ok")]
                if ok: st.success("–°–æ–∑–¥–∞–Ω–æ: " + ", ".join([r.get("key") or r.get("id","?") for r in ok]))
                if bad: st.error("–û—à–∏–±–∫–∏: " + "; ".join([r.get("error","")[:160] for r in bad]))

st.caption("–ì–∞–ª–æ—á–∫–∏ —Å—Ç–æ—è—Ç –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ ‚Üí —Å–Ω–∏–º–∞–µ—à—å –ª–∏—à–Ω–µ–µ. Enter –≤ –ø–æ–ª—è—Ö Jira: –ø–µ—Ä–µ—Ö–æ–¥, –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞.")
